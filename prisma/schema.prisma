// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  fcmToken              String? // Simpan token FCM di sini
  Notification          Notification[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model AccountEmail {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id          String  @id @default(uuid()) @map("_id")
  name        String
  email       String
  address     String
  picture     String
  signInvoice Boolean @default(false)

  userDept  String   @map("user_dept")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  asset      Asset[]             @relation("AssignAssets")
  department Department          @relation("EmployeeDept", fields: [userDept], references: [id])
  tickets    TicketMaintenance[]
}

model Department {
  id        String     @id @default(uuid()) @map("_id")
  dept_name String
  note      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  employee  Employee[] @relation("EmployeeDept")
  asset     Asset[]    @relation("DepartmentAsset")
}

//Product Tabel 
model Product {
  id                   String   @id @default(uuid()) @map("_id")
  part_number          String
  part_name            String
  nick_name            String
  satuan_pemasukan     String
  satuan_penyimpanan   String
  satuan_pengeluaran   String
  conversi_pemasukan   Int
  conversi_penyimpanan Int
  conversi_pengeluaran Int
  description          String?
  minStock             Int
  maxStock             Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now()) @updatedAt

  Harga Harga[] @relation("HargaJualProduct")

  gudangId    String @map("gudang_id")
  lokasiRakId String @map("lokasirak_id")
  rakId       String @map("rak_id")
  groupId     String @map("group_id")
  brandId     String @map("brand_id")
  kategoriId  String @map("kategori_id")
  jenisId     String @map("jenisi_id")

  jenisproduct    JenisProduct    @relation("JenisProducts", fields: [jenisId], references: [id])
  kategoriproduct KategoriProduct @relation("KategoriProducts", fields: [kategoriId], references: [id])
  brand           Brand           @relation("BrandProducts", fields: [brandId], references: [id])
  group           Group           @relation("GroupProducts", fields: [groupId], references: [id])
  rak             Rak             @relation("RakProducts", fields: [rakId], references: [id])
  lokasiRak       LokasiRak       @relation("LokasiRakProducts", fields: [lokasiRakId], references: [id])
  gudang          Gudang          @relation("GudangProducts", fields: [gudangId], references: [id])
  assets          Asset[]         @relation("ProductAssets")
}

model Harga {
  id        String   @id @default(uuid()) @map("_id")
  idProduct String   @map("HargaJualProduct")
  idMtUang  String   @map("Matauang")
  hargaHpp  Decimal  @db.Decimal(15, 2)
  hargaJual Decimal  @db.Decimal(15, 2)
  default   Boolean  @default(false)
  createdAt DateTime
  updatedAt DateTime

  part_number Product  @relation("HargaJualProduct", fields: [idProduct], references: [id])
  mtUang      MataUang @relation("MataUang", fields: [idMtUang], references: [id])
}

model Group {
  id        String   @id @default(uuid()) @map("_id")
  note      String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Add this line to establish the reverse relation to Product
  products Product[] @relation("GroupProducts")
}

model Unit {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Brand {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products Product[] @relation("BrandProducts")
}

model Gudang {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products Product[] @relation("GudangProducts")
}

model Rak {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products Product[] @relation("RakProducts")
}

model LokasiRak {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  products Product[] @relation("LokasiRakProducts")
}

model MataUang {
  id    String  @id @default(uuid()) @map("_id")
  name  String
  note  String
  Harga Harga[] @relation("MataUang")
}

model JenisProduct {
  id   String @id @default(uuid()) @map("_id")
  name String
  note String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  product   Product[] @relation("JenisProducts")
}

model KategoriProduct {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  product Product[] @relation("KategoriProducts")
}

model Asset {
  id            String         @id @default(uuid()) @map("_id")
  countNumber   Int
  assetNumber   String
  status        AssetStatus
  location      String?
  purchaseDate  DateTime?
  purchaseCost  Float?
  residualValue Float? // Nilai sisa aset setelah penyusutan
  usefulLife    Int? // Masa manfaat aset (dalam tahun)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  depreciations Depreciation[]
  assetTypeId   String
  assetType     AssetType      @relation(fields: [assetTypeId], references: [id])
  departmentId  String
  assetImage1   String?        @default("/public/noImage.jpg")
  productId     String         @map("product_id")
  employeeId    String?

  product    Product             @relation(fields: [productId], references: [id], name: "ProductAssets")
  employee   Employee?           @relation(fields: [employeeId], references: [id], name: "AssignAssets")
  department Department?         @relation(fields: [departmentId], references: [id], name: "DepartmentAsset")
  tickets    TicketMaintenance[]
}

model AssetType {
  id          String   @id @default(uuid()) @map("_id")
  name        String // Nama jenis aset (contoh: "Kendaraan", "Peralatan Elektronik")
  description String? // Deskripsi jenis aset
  assets      Asset[] // Relasi ke aset
  kode        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Depreciation {
  id                 String           @id @default(uuid()) @map("_id")
  assetId            String // Relasi ke aset
  asset              Asset            @relation(fields: [assetId], references: [id])
  date               DateTime // Tanggal pencatatan penyusutan
  amount             Float // Jumlah penyusutan pada periode ini
  description        String? // Deskripsi (opsional)
  depreciationTypeId String // Relasi ke tipe depresiasi
  depreciationType   DepreciationType @relation(fields: [depreciationTypeId], references: [id])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model DepreciationType {
  id            String         @id @default(uuid()) @map("_id")
  name          String // Nama tipe depresiasi (contoh: "Straight-Line", "Double Declining Balance")
  description   String? // Deskripsi tipe depresiasi
  depreciations Depreciation[] // Relasi ke depresiasi
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum AssetStatus {
  AVAILABLE
  IN_USE
  UNDER_MAINTENANCE
  DECOMMISSIONED
}

model TicketMaintenance {
  id                 String         @id @default(uuid()) @map("_id") // Menggunakan UUID sebagai ID
  countNumber        Int
  ticketNumber       String
  troubleUser        String // User yang melaporkan masalah
  analisaDescription String? // Deskripsi analisa masalah
  actionDescription  String? // Deskripsi tindakan yang diambil
  priorityStatus     PriorityStatus //Prioritas: Low, Medium, High, Critical
  status             StatusTicket // Status: Pending, In Progress, Completed
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  scheduledDate      DateTime? // Tanggal penjadwalan maintenance
  actualCheckDate    DateTime?
  completedDate      DateTime? // Tanggal penyelesaian maintenance
  employeeId         String
  assetId            String
  technicianId       String?
  ticketImage1       String?        @default("/public/noImage.jpg")
  ticketImage2       String?        @default("/public/noImage.jpg")
  ticketImage3       String?        @default("/public/noImage.jpg")

  employee   Employee              @relation(fields: [employeeId], references: [id])
  asset      Asset                 @relation(fields: [assetId], references: [id])
  schedules  ScheduleMaintenance[]
  technician Technician?           @relation(fields: [technicianId], references: [id])
}

enum PriorityStatus {
  Low
  Medium
  High
  Critical
}

enum StatusTicket {
  Pending
  Assigned
  In_Progress
  Completed
  Canceled
}

model ScheduleMaintenance {
  id            String            @id @default(uuid()) @map("_id") // Menggunakan UUID sebagai ID
  scheduledDate DateTime
  completedDate DateTime?
  notes         String?
  ticketId      String
  ticket        TicketMaintenance @relation(fields: [ticketId], references: [id])
}

model Notification {
  id        String   @id @default(uuid()) // ID unik
  userId    String // ID user yang menerima notifikasi
  title     String // Judul notifikasi
  message   String // Isi pesan notifikasi
  isRead    Boolean  @default(false) // Status apakah notifikasi sudah dibaca
  createdAt DateTime @default(now()) // Waktu dibuat

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Technician {
  id             String              @id @default(uuid())
  name           String
  phone          String? // Nomor telepon opsional
  email          String?             @unique
  specialization String // Bidang keahlian (misal: Networking, Hardware, Software)
  status         TechnicianStatus    @default(ACTIVE)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  tickets        TicketMaintenance[]
}

enum TechnicianStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
}
